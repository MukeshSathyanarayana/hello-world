AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Parameters:
  Region:
    Type: String
  APIKey:
    Type: String
  SSAPIKey:
    Type: String

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: index.handler
    MemorySize: 128
    Timeout: 60

Resources:
  # iam role for step func execution  
  stateFunctionExecutorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: stateMachineExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "states.${Region}.amazonaws.com"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: stateMachinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "lambda:InvokeFunction"
                Resource: "*"
    
  #IAM role for lambda
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
                - s3.amazonaws.com
                - iam.amazonaws.com
                - acm.amazonaws.com
                - rds.amazonaws.com
                - cloudfront.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CloudHRMultiTenant
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds:*
                  - lambda:InvokeFunction
                  - route53:*
                  - logs:*
                  - s3:*
                  - sts:AssumeRole
                  - ec2:*
                  - iam:*
                  - elasticloadbalancing:*
                  - cloudformation:*
                  - states:StartExecution
                  - secretsmanager:*
                  - ssm:*
                  - acm:*
                  - cloudfront:*
                  - logs:*
                Resource: "*"

  FnAppToStepFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/appToStepFunction
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          CREATE_STATE_MACHINE_ARN: !Ref cloudhrmtDevStateMachine
          DELETE_STATE_MACHINE_ARN: !Ref cloudhrmtDevDeletionStateMachine
          DB_STATE_MACHINE_ARN: !Ref cloudhrmtDBStateMachine # change based on Mukesh input
          PLATFORM_API: !GetAtt [triggerPlatfromApi, Arn]
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
          CREATE_KC_REALM: !GetAtt [createKCRealm, Arn]

  runCloudFormation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/runCloudFormation
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
          API_KEY: !Ref APIKey
          CREATE_KC_REALM: !GetAtt [createKCRealm, Arn]
          
  triggerPlatfromApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/platformAPI
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
          API_KEY: !Ref APIKey
          API_KEY_SS: !Ref SSAPIKey
          CREATE_KC_REALM: !GetAtt [createKCRealm, Arn]
  
  createKCRealm:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/keyCloak
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]

  pollCloudFormation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/pollCloudFormation
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
  
  createDb:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/createDb
      VpcConfig:
        SecurityGroupIds:
          - sg-0abd802dea7d41dd5
          - sg-06156249af0bc9daa
        SubnetIds:
          - subnet-050a0ecb390daedf5
          - subnet-0605aff6740ecb0ef
          - subnet-08418598767b4dca3
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]

  createEngUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/createEngineerUser
      VpcConfig:
        SecurityGroupIds:
          - sg-0abd802dea7d41dd5
          - sg-06156249af0bc9daa
        SubnetIds:
          - subnet-050a0ecb390daedf5
          - subnet-0605aff6740ecb0ef
          - subnet-08418598767b4dca3
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
      
  overNightJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/overnightJobScheduling
      VpcConfig:
        SecurityGroupIds:
          - sg-0abd802dea7d41dd5
          - sg-06156249af0bc9daa
        SubnetIds:
          - subnet-050a0ecb390daedf5
          - subnet-0605aff6740ecb0ef
          - subnet-08418598767b4dca3
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
      
  overNightJobTime:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/overnightTimeScheduling
      VpcConfig:
        SecurityGroupIds:
          - sg-0abd802dea7d41dd5
          - sg-06156249af0bc9daa
        SubnetIds:
          - subnet-050a0ecb390daedf5
          - subnet-0605aff6740ecb0ef
          - subnet-08418598767b4dca3
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
    
  deleteStack:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/deleteStack
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          UPDATE_CPS_ARN: !GetAtt [updateStatusCPM, Arn]
          API_KEY: !Ref APIKey

  updateStatusCPM:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/updateStatusCPS
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn

  cloudhrmtDevStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: cloudhrmtDev-StateMachine
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Cloud Formation Execution",
            "StartAt": "CloudFormation",
            "States": {
              "CloudFormation": {
                "Type": "Task",
                "Resource": "${lambdaArnCF}",
                "Next": "WaitXSec"
              },
              "WaitXSec": {
                "Type": "Wait",
                "Seconds": 180,
                "Next": "PollStatus"
              },
              "PollStatus": {
                "Type": "Task",
                "Resource": "${lambdaArnPoll}",
                "Next": "ChoiceState"
              },
              "ChoiceState": {
                "Type" : "Choice",
                "Choices": [
                  {
                    "Variable": "$.foo",
                    "StringEquals": "Create Success",
                    "Next": "UpdateStatustoCPM"
                  },
                  {
                    "Variable": "$.foo",
                    "StringEquals": "Create Failed",
                    "Next": "UpdateStatustoCPM"
                  },
                  {
                    "Variable": "$.foo",
                    "StringEquals": "NA",
                    "Next": "WaitXSec"
                  }
                ],
                "Default": "WaitXSec"
              },
              "UpdateStatustoCPM": {
                "Type": "Task",
                "Resource": "${lambdaArnCpmStatus}",
                "End": true
              }
            }
          }
        - lambdaArnCF: !GetAtt [ runCloudFormation, Arn ]
          lambdaArnCpmStatus: !GetAtt [updateStatusCPM, Arn]
          lambdaArnPoll: !GetAtt [pollCloudFormation, Arn]
      RoleArn: !GetAtt [ stateFunctionExecutorRole, Arn ]

  # state machine for delete
  cloudhrmtDevDeletionStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: cloudhrmtDev-Deletion-StateMachine
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Cloud Formation Deletion",
            "StartAt": "CloudFormationDeletion",
            "States": {
              "CloudFormationDeletion": {
                "Type": "Task",
                "Resource": "${lambdaArnCFD}",
                "Next": "WaitXSec"
              },
              "WaitXSec": {
                "Type": "Wait",
                "Seconds": 180,
                "Next": "PollStatus"
              },
              "PollStatus": {
                "Type": "Task",
                "Resource": "${lambdaArnPoll}",
                "Next": "ChoiceState"
              },
              "ChoiceState": {
                "Type" : "Choice",
                "Choices": [
                  {
                    "Variable": "$.foo",
                    "StringEquals": "Delete Success",
                    "Next": "UpdateStatustoCPM"
                  },
                  {
                    "Variable": "$.foo",
                    "StringEquals": "Delete Failed",
                    "Next": "UpdateStatustoCPM"
                  }
                ],
                "Default": "WaitXSec"
              },
              "UpdateStatustoCPM": {
                "Type": "Task",
                "Resource": "${lambdaArnCpmStatus}",
                "End": true
              }
            }
          }
        - lambdaArnCFD: !GetAtt [ deleteStack, Arn ]
          lambdaArnCpmStatus: !GetAtt [ updateStatusCPM, Arn ]
          lambdaArnPoll: !GetAtt [ pollCloudFormation, Arn ]
      RoleArn: !GetAtt [ stateFunctionExecutorRole, Arn ]
  
  # state machine for db creation
  cloudhrmtDBStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: cloudhrmtDev-DB-StateMachine
      DefinitionString: !Sub
        - |-
          {
            "Comment": "DB Creation",
            "StartAt": "DatabaseCreation",
            "States": {
              "DatabaseCreation": {
                "Type": "Task",
                "Resource": "${lambdaArnDB}",
                "Next": "WaitXSec"
              },
              "WaitXSec": {
                "Type": "Wait",
                "Seconds": 300,
                "Next": "CreateEngUser"
              },
              "CreateEngUser": {
                "Type": "Task",
                "Resource": "${lambdaArnCreateEng}",
                "Next": "OverNightJob"
              },
              "OverNightJob": {
                "Type": "Task",
                "Resource": "${lambdaArnOverNigthJob}",
                "Next": "OverNightJobTime"
              },
              "OverNightJobTime": {
                "Type": "Task",
                "Resource": "${lambdaArnOverNigthJobTime}",
                "End": true
              }
            }
          }
        - lambdaArnDB: !GetAtt [ createDb, Arn ]
          lambdaArnCreateEng: !GetAtt [ createEngUser, Arn ]
          lambdaArnOverNigthJob: !GetAtt [ overNightJob, Arn ]
          lambdaArnOverNigthJobTime: !GetAtt [ overNightJobTime, Arn ]
          lambdaArnCpmStatus: !GetAtt [ updateStatusCPM, Arn ]
      RoleArn: !GetAtt [ stateFunctionExecutorRole, Arn ]
